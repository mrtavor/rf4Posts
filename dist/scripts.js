const VK_SERVICE_KEY = "902c24b6902c24b6902c24b6f09302f59f9902c902c24b6f7d83e038215132524e85fe6";
const GROUP_ID = "pp4wikipedia";
const MAP_NAMES = [
  "–≤–æ–ª—Ö–æ–≤", "–æ—Å—Ç—Ä–æ–≥", "–∞—Ö—Ç—É–±–∞", "—Ç—É–Ω–≥—É—Å–∫–∞", "—è–º–∞", "–¥–æ–Ω–µ—Ü",
  "–ª–∞–¥–æ–∂—Å–∫–æ–µ", "–º–µ–¥–≤–µ–∂—å–µ", "–∫—É–æ—Ä–∏", "–±–µ–ª–∞—è", "—Å—É—Ä–∞", "–≤—å—é–Ω–æ–∫",
  "–∫–æ–º–∞—Ä–∏–Ω–æ–µ", "—è–Ω—Ç–∞—Ä–Ω–æ–µ", "–∞—Ä—Ö–∏–ø–µ–ª–∞–≥", "–Ω–æ—Ä–≤–µ–∂—Å–∫–æ–µ", "—à—Ç—Ä–∞—Ñ–Ω–æ–π", "–º–µ–¥–Ω–æ–µ"
];

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Ç–∏–∂–Ω—è
function getWeekNumber(date) {
  const firstDayOfYear = new Date(date.getFullYear(), 0, 1);
  const pastDaysOfYear = (date - firstDayOfYear) / 86400000;
  return Math.ceil((pastDaysOfYear + firstDayOfYear.getDay() + 1) / 7);
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ —Ñ–∞–π–ª—É JSON
function getWeeklyFileName() {
  const now = new Date();
  const year = now.getFullYear();
  const week = getWeekNumber(now);
  return `${year}-week-${week}.json`;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —É JSON
function saveDataToWeeklyFile(newData) {
  const fileName = getWeeklyFileName();

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —ñ—Å–Ω—É—î —Ñ–∞–π–ª —É LocalStorage
  let weeklyData = JSON.parse(localStorage.getItem(fileName)) || [];

  // –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
  weeklyData.push(newData);

  // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ–≥–æ –º–∞—Å–∏–≤—É —É LocalStorage
  localStorage.setItem(fileName, JSON.stringify(weeklyData));

  console.log(`–î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª: ${fileName}`);
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –ø–æ—Å—Ç—ñ–≤ –∑ VK
async function getLatestVKPost() {
  const url = `https://api.vk.com/method/wall.get?owner_id=-161310162&count=10&access_token=${VK_SERVICE_KEY}&v=5.199`;
  const response = await fetch(url);
  const json = await response.json();

  const posts = json.response.items;

  if (!posts || posts.length === 0) {
    console.log("–ü–æ—Å—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
    return;
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å–Ω—É—é—á–∏—Ö URL –∑ LocalStorage
  const fileName = getWeeklyFileName();
  const existingData = JSON.parse(localStorage.getItem(fileName)) || [];
  const existingUrls = existingData.map(post => post.postUrl);

  let newPostsAdded = 0;

  for (const post of posts) {
    const postId = post.id;
    const ownerId = post.owner_id;
    const postUrl = `https://vk.com/wall${ownerId}_${postId}`;

    // –Ø–∫—â–æ –ø–æ—Å—Ç –≤–∂–µ —î –≤ JSON, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –π–æ–≥–æ
    if (existingUrls.includes(postUrl)) {
      console.log(`–ü–æ—Å—Ç –∑ URL ${postUrl} –≤–∂–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∏–π.`);
      continue;
    }

    // –Ø–∫—â–æ –ø–æ—Å—Ç –Ω–µ –º—ñ—Å—Ç–∏—Ç—å —Ç–µ–≥—ñ–≤ –≥—Ä–∏, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –π–æ–≥–æ
    const containsValidTag = MAP_NAMES.some(tag => post.text.toLowerCase().includes(`#${tag}@pp4wikipedia`));
    if (!containsValidTag) {
      console.log(`–ü–æ—Å—Ç –∑ URL ${postUrl} –Ω–µ –º–∞—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–µ–≥—É —ñ —ñ–≥–Ω–æ—Ä—É—î—Ç—å—Å—è.`);
      continue;
    }

    // –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
    const date = new Date(post.date * 1000).toLocaleString();
    const text = post.text || "";

    // üó∫Ô∏è –õ–æ–∫–∞—Ü—ñ—è
    let location = "";
    const locationMatch = text.toLowerCase().match(/#([–∞-—è—ëa-z]+)@pp4wikipedia/);
    if (locationMatch) {
      const rawLoc = locationMatch[1];
      if (MAP_NAMES.includes(rawLoc)) {
        location = `üó∫Ô∏è ${rawLoc.charAt(0).toUpperCase() + rawLoc.slice(1)}`;
      }
    }

    // üêü –†–∏–±–∞
    const fishMatch = text.match(/üêü\s*(.*)/);
    const fish = fishMatch ? `üêü ${fishMatch[1].trim()}` : "";

    // üìå –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏
    let coords = "";
    const coordsMatch = text.match(/üìå\s*(\d{1,3}:\d{1,3})/);
    if (coordsMatch) {
      coords = "üìå " + coordsMatch[1].trim().replace(/:/g, '.');
    } else {
      const coordsTextMatch = text.match(/üìå\s*(.*)/);
      if (coordsTextMatch) {
        coords = "üìå " + coordsTextMatch[1].trim();
      }
    }

    // üé£ –ö–ª—ñ–ø—Å–∞
    let clip = "";
    const clipExplicitMatch = text.match(/–ö–ª–∏–ø—Å–∞\s*(\d{1,2})/i);
    if (clipExplicitMatch) {
      clip = `üé£ –ö–ª–∏–ø—Å–∞ ${clipExplicitMatch[1].trim()}`;
    } else {
      const clipLineMatch = text.match(/üé£([^\n\r]*)/);
      if (clipLineMatch) {
        clip = `üé£ ${clipLineMatch[1].trim()}`;
      }
    }

    // üìù –û–ø–∏—Å
    const descMatch = text.match(/üìù\s*(.*)/s);
    const description = descMatch ? `üìù ${descMatch[1].trim()}` : "";

    // –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –æ–±'—î–∫—Ç–∞ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
    const parsedData = {
      date,
      location,
      fish,
      coords,
      clip,
      description,
      postUrl
    };

    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —É JSON
    saveDataToWeeklyFile(parsedData);
    newPostsAdded++;
  }

  if (newPostsAdded === 0) {
    console.log("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤–∏—Ö –ø—ñ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ—Å—Ç—ñ–≤.");
  } else {
    console.log(`–£—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ ${newPostsAdded} –Ω–æ–≤–∏—Ö –ø–æ—Å—Ç—ñ–≤.`);
  }
}

// –í–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó
getLatestVKPost();


// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è JSON-—Ñ–∞–π–ª—É —è–∫ –∞—Ä—Ö—ñ–≤
function downloadWeeklyFile() {
    const fileName = getWeeklyFileName();
    const data = localStorage.getItem(fileName);
  
    if (!data) {
      console.log("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è —Ü—å–æ–≥–æ —Ç–∏–∂–Ω—è.");
      return;
    }
  
    const blob = new Blob([data], { type: "application/json" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = fileName;
    a.click();
    URL.revokeObjectURL(url);
  
    console.log(`–§–∞–π–ª ${fileName} –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ.`);
  }