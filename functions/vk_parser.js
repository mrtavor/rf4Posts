const fetch = (...args) => import('node-fetch').then(({ default: fetch }) => fetch(...args));
const fs = require('fs');
const path = require('path'); // –î–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —à–ª—è—Ö–∞–º–∏

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏
const VK_SERVICE_KEY = "902c24b6902c24b6902c24b6f09302f59f9902c902c24b6f7d83e038215132524e85fe6"; // –ö–ª—é—á –¥–æ—Å—Ç—É–ø—É
const GROUP_ID = "161310162"; // –ß–∏—Å–ª–æ–≤–∏–π ID –≥—Ä—É–ø–∏
const API_VERSION = "5.199";
const FOUR_HOURS_IN_SECONDS = 4 * 60 * 60; // 2 –≥–æ–¥–∏–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

// –®–ª—è—Ö –¥–æ –ø–∞–ø–∫–∏ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è JSON-—Ñ–∞–π–ª—ñ–≤
const DATA_FOLDER = path.resolve(__dirname, '../public/data'); // –®–ª—è—Ö –¥–æ –ø–∞–ø–∫–∏ public/data
const FILE_NAME = `vk_posts_${new Date().toISOString().split('T')[0]}.json`; // –Ü–º'—è —Ñ–∞–π–ª—É –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è

// –î–æ–∑–≤–æ–ª–µ–Ω—ñ —Ç–µ–≥–∏ –∫–∞—Ä—Ç
const ALLOWED_TAGS = [
  "#–≤–æ–ª—Ö–æ–≤@pp4wikipedia", "#–æ—Å—Ç—Ä–æ–≥@pp4wikipedia", "#–∞—Ö—Ç—É–±–∞@pp4wikipedia", "#—Ç—É–Ω–≥—É—Å–∫–∞@pp4wikipedia",
  "#—è–º–∞@pp4wikipedia", "#–¥–æ–Ω–µ—Ü@pp4wikipedia", "#–ª–∞–¥–æ–∂—Å–∫–æ–µ@pp4wikipedia", "#–º–µ–¥–≤–µ–∂—å–µ@pp4wikipedia",
  "#–∫—É–æ—Ä–∏@pp4wikipedia", "#–±–µ–ª–∞—è@pp4wikipedia", "#—Å—É—Ä–∞@pp4wikipedia", "#–≤—å—é–Ω–æ–∫@pp4wikipedia",
  "#–∫–æ–º–∞—Ä–∏–Ω–æ–µ@pp4wikipedia", "#—è–Ω—Ç–∞—Ä–Ω–æ–µ@pp4wikipedia", "#–∞—Ä—Ö–∏–ø–µ–ª–∞–≥@pp4wikipedia", "#–Ω–æ—Ä–≤–µ–∂—Å–∫–æ–µ@pp4wikipedia",
  "#—à—Ç—Ä–∞—Ñ–Ω–æ–π@pp4wikipedia", "#–º–µ–¥–Ω–æ–µ@pp4wikipedia"
];

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ API –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
async function fetchVKPosts() {
  const url = `https://api.vk.com/method/wall.get?owner_id=-${GROUP_ID}&count=10&access_token=${VK_SERVICE_KEY}&v=${API_VERSION}`;
  
  try {
    const response = await fetch(url);
    const data = await response.json();

    if (data.error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ API:", data.error);
      return;
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –ø–∞–ø–∫–∞ DATA_FOLDER
    if (!fs.existsSync(DATA_FOLDER)) {
      console.error(`–ü–∞–ø–∫–∞ ${DATA_FOLDER} –Ω–µ —ñ—Å–Ω—É—î. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –ø–∞–ø–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞.`);
      return;
    }

    const filePath = path.join(DATA_FOLDER, FILE_NAME);
    const existingPosts = getExistingPosts(filePath); // –û—Ç—Ä–∏–º—É—î–º–æ —ñ—Å–Ω—É—é—á—ñ –ø–æ—Å—Ç–∏ –∑ —Ñ–∞–π–ª—É

    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π `post_id` —Å–µ—Ä–µ–¥ —ñ—Å–Ω—É—é—á–∏—Ö –ø–æ—Å—Ç—ñ–≤
    const lastPostId = existingPosts.length > 0 
      ? Math.max(...existingPosts.map(post => post.post_id)) 
      : 0;

    const postsToAdd = [];
    const currentTime = Math.floor(Date.now() / 1000); // –ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å —É —Å–µ–∫—É–Ω–¥–∞—Ö

    for (const post of data.response.items) {
      const text = post.text;

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ—Å—Ç –Ω–µ —Å—Ç–∞—Ä—à–∏–π –Ω—ñ–∂ 2 –≥–æ–¥–∏–Ω–∏
      if (currentTime - post.date > FOUR_HOURS_IN_SECONDS) {
        continue; // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ—Å—Ç–∏ —Å—Ç–∞—Ä—à—ñ –∑–∞ 2 –≥–æ–¥–∏–Ω–∏
      }

      // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–∞—Ä—Ç—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, #–∞—Ö—Ç—É–±–∞@pp4wikipedia)
      const mapMatch = text.match(/#([\w–∞-—è–ê-–Ø—ë–Å]+)@pp4wikipedia/);
      if (!mapMatch) continue;

      const mapName = mapMatch[1]; // –í–∏—Ç—è–≥—É—î–º–æ –ª–∏—à–µ –Ω–∞–∑–≤—É –∫–∞—Ä—Ç–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "–∞—Ö—Ç—É–±–∞")

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ç–µ–≥ –∫–∞—Ä—Ç–∏ –¥–æ–∑–≤–æ–ª–µ–Ω–∏–π
      if (!ALLOWED_TAGS.includes(`#${mapName}@pp4wikipedia`)) continue;

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ—Å—Ç –≤–∂–µ —î —É —Ñ–∞–π–ª—ñ
      const postURL = `https://vk.com/wall-${GROUP_ID}_${post.id}`;
      if (existingPosts.some(existingPost => existingPost.post_URL === postURL)) {
        continue; // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ, —è–∫—â–æ –ø–æ—Å—Ç –≤–∂–µ —î —É —Ñ–∞–π–ª—ñ
      }

      // –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç—É –ø–æ—Å—Ç—É
      const fishMatch = text.match(/üêü(.+)/); // –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ä–∏–±—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ö–∞—Ä–ø —á–µ—à—É–π—á–∞—Ç—ã–π)
      const coordinatesMatch = text.match(/üìå(.+)/); // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ (–±—É–¥—å-—è–∫–∏–π —Ç–µ–∫—Å—Ç –ø—ñ—Å–ª—è üìå)
      const clipMatch = text.match(/üé£(.+)/); // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–ª—ñ–ø—Å—É (–±—É–¥—å-—è–∫–∏–π —Ç–µ–∫—Å—Ç –ø—ñ—Å–ª—è üé£)
      const descriptionMatch = text.match(/üìù(.+)/); // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –æ–ø–∏—Å (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —Ç–µ–∫—Å—Ç –ø—ñ—Å–ª—è üìù)

      // –û–±—Ä–æ–±–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
      const coordinates = coordinatesMatch ? coordinatesMatch[1].trim() : "–ù–µ–º–∞—î –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç";

      // –û–±—Ä–æ–±–∫–∞ –∫–ª—ñ–ø—Å–∏
      const clip = clipMatch ? clipMatch[1].trim() : "–ù–µ–º–∞—î –∫–ª—ñ–ø—Å–∏";

      // –Ø–∫—â–æ –∫–ª—ñ–ø—Å–∞ –Ω–µ –º—ñ—Å—Ç–∏—Ç—å —Å–ª–æ–≤–æ "–ö–ª–∏–ø—Å–∞", –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–µ—Å—å —Ä—è–¥–æ–∫ –±–µ–∑ –∑–º—ñ–Ω
      const validClip = clipMatch ? clip : "–ù–µ–º–∞—î –∫–ª—ñ–ø—Å–∏";

      // –î–æ–¥–∞—î–º–æ –ø–æ—Å—Ç, —è–∫—â–æ –≤—ñ–Ω —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π
      if (!existingPosts.some(existingPost => existingPost.post_URL === postURL)) {
        postsToAdd.push({
          post_id: lastPostId + postsToAdd.length + 1, // –ü—Ä–∏—Å–≤–æ—é—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π `post_id`
          post_URL: postURL, // URL –ø–æ—Å—Ç—É
          date: new Date(post.date * 1000).toISOString().replace('T', ' ').split('.')[0], // –ß–∞—Å —ñ –¥–∞—Ç–∞
          map: mapName, // –ù–∞–∑–≤–∞ –∫–∞—Ä—Ç–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "–∞—Ö—Ç—É–±–∞")
          fish: fishMatch ? fishMatch[1].trim() : "–ù–µ–≤—ñ–¥–æ–º–æ", // –†–∏–±–∞
          coordinates: coordinates, // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏
          clip: validClip, // –ö–ª—ñ–ø—Å–∞
          description: descriptionMatch ? descriptionMatch[1].trim() : "–ù–µ–º–∞—î –æ–ø–∏—Å—É" // –û–ø–∏—Å
        });
      }

      // –Ø–∫—â–æ –¥–æ–¥–∞–Ω–æ 5 –Ω–æ–≤–∏—Ö –ø–æ—Å—Ç—ñ–≤, –∑—É–ø–∏–Ω—è—î–º–æ —Ü–∏–∫–ª
      if (postsToAdd.length === 5) break;
    }

    if (postsToAdd.length > 0) {
      saveToJSON(postsToAdd, filePath);
    } else {
      console.log("–ù–æ–≤–∏—Ö –ø–æ—Å—Ç—ñ–≤ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–µ–º–∞—î.");
    }
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö:", error);
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —É JSON-—Ñ–∞–π–ª
function saveToJSON(newPosts, filePath) {
  let existingPosts = getExistingPosts(filePath);

  // –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ –ø–æ—Å—Ç–∏ –¥–æ —ñ—Å–Ω—É—é—á–∏—Ö
  const updatedPosts = [
    ...existingPosts,
    ...newPosts.filter(newPost => !existingPosts.some(existingPost => existingPost.post_URL === newPost.post_URL))
  ];

  // –ó–∞–ø–∏—Å—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ —É —Ñ–∞–π–ª
  fs.writeFile(filePath, JSON.stringify(updatedPosts, null, 2), (err) => {
    if (err) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å—ñ —É —Ñ–∞–π–ª:", err);
    } else {
      console.log(`–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª: ${filePath}`);

      // –ü—ñ—Å–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –æ–Ω–æ–≤–ª—é—î–º–æ posts_index.json
      updatePostsIndex();
    }
  });
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å–Ω—É—é—á–∏—Ö –ø–æ—Å—Ç—ñ–≤ –∑ —Ñ–∞–π–ª—É
function getExistingPosts(filePath) {
  if (fs.existsSync(filePath)) {
    const fileData = fs.readFileSync(filePath, 'utf8');
    return JSON.parse(fileData);
  }
  return [];
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ–∂–Ω—ñ 10 —Ö–≤–∏–ª–∏–Ω
function startFetching() {
  fetchVKPosts(); // –í–∏–∫–æ–Ω—É—î–º–æ –ø–µ—Ä—à–∏–π –∑–∞–ø–∏—Ç –æ–¥—Ä–∞–∑—É
  setInterval(fetchVKPosts, 20 * 60 * 1000); // –ü–æ–≤—Ç–æ—Ä—é—î–º–æ –∫–æ–∂–Ω—ñ 10 —Ö–≤–∏–ª–∏–Ω
}

function updatePostsIndex() {
  fs.readdir(DATA_FOLDER, (err, files) => {
    if (err) {
      console.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ –ø–∞–ø–∫—É –∑ —Ñ–∞–π–ª–∞–º–∏:", err);
      return;
    }

    const postFiles = files.filter(filename => /^vk_posts_\d{4}-\d{2}-\d{2}\.json$/.test(filename));

    postFiles.sort((a, b) => {
      const dateA = a.match(/\d{4}-\d{2}-\d{2}/)[0];
      const dateB = b.match(/\d{4}-\d{2}-\d{2}/)[0];
      return dateB.localeCompare(dateA); // –°–æ—Ä—Ç—É—î–º–æ –≤—ñ–¥ –Ω–æ–≤–∏—Ö –¥–æ —Å—Ç–∞—Ä–∏—Ö
    });

    const indexFilePath = path.join(DATA_FOLDER, 'posts_index.json');

    fs.writeFile(indexFilePath, JSON.stringify(postFiles, null, 2), err => {
      if (err) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ posts_index.json:", err);
      } else {
        console.log("–§–∞–π–ª posts_index.json –æ–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ.");
      }
    });
  });
}
// –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—É
startFetching();